# Tutorial pipeline file.  To run this, from the analysis_IM directory run:
# `python pipeline/manager.py input/tutorial.pipe`.

import os

from core import dir_data
import scipy as sp

# What data to process and how to split it up.
# field = '15hr'
field = '1hr'

# sessions = [42]
# sessions = [90]
sessions = [87, 88, 89, 90]

file_middles = tuple(dir_data.get_data_files(sessions, field=field, 
                                             project="GBT10B_036", 
											 type='ralongmap'))
# file_middles = file_middles[:2]
# file_middles = [file_middles[0], file_middles[1]] # first process only one file
# map_centre = (217.87, 2.0)
# map_shape = (64, 34)
# map_spacing = .07
map_centre = (13.0, 1.85)
# map_shape = (161, 83)
# map_shape = (140, 81) # adjusted to (140,81) due to memory limits.
map_shape = (64, 34)
# map_shape = (16, 8)
# map_shape = (4, 4)
# map_shape = (32, 16)
map_spacing = .0627

base_dir = os.getenv('GBT_OUT')
if not base_dir:
  msg = "The environment variable `GBT_OUT` is not set."
  raise RuntimeError(msg)
data_dir = os.getenv('GBT_DATA')
if not data_dir:
  msg = "The environment variable `GBT_DATA` is not set."
  raise RuntimeError(msg)
kiyo_dir =  os.getenv('GBT_KM')
if not kiyo_dir:
  msg = "The environment variable `GBT_KM` is not set."
  raise RuntimeError(msg)

# prefix given to all output files.
# prefix = 'tut_'
prefix = 'pol_'
map_base = base_dir + 'maps/'
map_prefix = prefix

# Maximum number of processes to use.
# pipe_processes = 8
# pipe_processes = 2
pipe_processes = 16


####  List of modules to execute.  ####
pipe_modules = []

#### Calibration ####

# # #from time_stream import flag_data
# # #pipe_modules.append(flag_data.FlagData)

# from time_stream import rebin
# pipe_modules.append(rebin.Rebin)

# from time_stream import split_bands
# pipe_modules.append(split_bands.SplitBands)

# # old calibration module
# # from time_stream import calibrate
# # pipe_modules.append(calibrate.Calibrate)

# # new calibration module
# from time_stream import flux_diff_gain_cal
# pipe_modules.append(flux_diff_gain_cal.Calibrate)

# from time_stream import rotate_pol
# pipe_modules.append(rotate_pol.RotatePol)

#### First Map making interation ####

# from map import dirty_map
# pipe_modules.append(dirty_map.DirtyMapMaker)

# from map import dirty_map_new
# pipe_modules.append(dirty_map_new.DirtyMapMaker)

# from map import clean_map
# pipe_modules.append(clean_map.CleanMapMaker)

from map import mean_qu
pipe_modules.append(mean_qu.MeanMapMaker)

# mean_qu
mqu_input_root = '/mnt/raid-project/gmrt/tcv/rotated_to_I_Q_new_pol/'
mqu_file_middles = file_middles
mqu_input_end = '.fits'
mqu_output_root = map_base + map_prefix
mqu_scans = ()
mqu_IFs = ()

mqu_polarizations = ('I','Q','U','V')
mqu_field_centre = map_centre
mqu_pixel_spacing = map_spacing
mqu_map_shape = map_shape
# mqu_time_block = 'scan'
# mqu_time_block = 'file'
mqu_time_block = 'all'
mqu_n_files_group = 0
mqu_frequency_correlations = 'None'
mqu_number_frequency_modes = 0
mqu_noise_parameter_file = ''
mqu_deweight_time_mean = True
# mqu_deweight_time_mean = False
mqu_deweight_time_slope = True
mqu_interpolation = 'cubic'


#### Parameters for the various modules. ####

# flag_data, RFI flagger.
fd_input_root = data_dir
fd_file_middles = file_middles
fd_input_end = '.fits'
fd_output_root = base_dir + 'flagged/' + prefix
fd_output_end = '.fits'
fd_scans = ()
fd_IFs = ()

fd_perform_hanning = False
fd_rotate = True
fd_cal_scale = True
fd_sigma_thres = 3.5
fd_badness_thres = 0.1
fd_time_cut = 10

# Rebin the time and frequency axis.
# Flagging the data takes a long time so you can skip it and get the input from 
# Kiyo's already flagged data.
#rb_input_root = fd_output_root
rb_input_root = kiyo_dir + 'flagged/'
rb_file_middles = file_middles
rb_input_end = '.fits'
rb_output_root = base_dir + 'rebinned/' + prefix
rb_output_end = '.fits'
rb_scans = ()
rb_IFs = ()

rb_n_bins_combined_freq = 32
rb_n_bins_combined_time = 2

# split_bands
sb_input_root = rb_output_root
sb_file_middles = file_middles
sb_input_end = '.fits'
sb_output_root = base_dir + 'band_split_new/' + prefix
sb_output_end = '.fits'
sb_scans = ()
sb_IFs = ()

# etc. Band chosen such the upper end is ~5MHz from resonance.
sb_n_bands = 1
sb_n_bins_band = 40
sb_offset = 68

# # calibrate
# cl_input_root = sb_output_root
# cl_file_middles = file_middles
# cl_input_end = '.fits'
# cl_output_root = base_dir + 'calibrated/' + prefix
# cl_output_end = '.fits'
# cl_scans = ()
# cl_IFs = ()

# cl_cal_temperature_files = (kiyo_dir + 'kevin_cal/cal_21.fits',)

# flux diff gain calibrate
fgc_input_root = sb_output_root
fgc_file_middles = file_middles
fgc_input_end = '.fits'
fgc_output_root = base_dir + 'avg_fdgp_cal_new/'
fgc_output_end = '.fits'
fgc_scans = ()
fgc_IFs = ()

fgc_mueler_file = base_dir + 'diff_gain_params/15hr_fdg_calc_avg_newhigh_res.txt'
fgc_RM_file = base_dir +'RM_tables/'
fgc_R_to_sky = True
fgc_DP_correct = True
fgc_RM_correct = False
fgc_Flux_special = True
# set Flux special to True when using something like an average and set mueler file to the filename

# rotate_pol
# rp_input_root = cl_output_root
rp_input_root = fgc_output_root
rp_file_middles = file_middles
rp_input_end = '.fits'
rp_output_root = base_dir + 'pol_selected/' + prefix
rp_output_end = '.fits'
rp_scans = ()
rp_IFs = ()

rp_new_pols = (1,2,3,4)
rp_average_cals = True


# dirty_map
# dm_input_root = rp_output_root
dm_input_root = '/mnt/raid-project/gmrt/tcv/rotated_to_I_Q_new_pol/'
dm_file_middles = file_middles
dm_input_end = '.fits'
dm_output_root = map_base + map_prefix
dm_scans = ()
dm_IFs = ()

dm_polarizations = ('I','Q','U','V')
dm_field_centre = map_centre
dm_pixel_spacing = map_spacing
dm_map_shape = map_shape
dm_time_block = 'scan'
# dm_time_block = 'file'
# dm_time_block = 'all'
dm_n_files_group = 0
dm_frequency_correlations = 'None'
dm_number_frequency_modes = 0
dm_noise_parameter_file = ''
dm_deweight_time_mean = True
# dm_deweight_time_mean = False
dm_deweight_time_slope = True
dm_interpolation = 'cubic'

# clean_map
cm_input_root = dm_output_root
cm_output_root = cm_input_root
cm_polarizations = ('I','Q','U','V')
# cm_bands = (762,)
cm_bands = (800,)
cm_save_noise_diag = True

